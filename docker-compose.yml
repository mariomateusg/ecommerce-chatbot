version: '3.9'
services:
  app:
    container_name: golang_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
    tty: true
    build: .
    ports:
      - 8080:8080
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - postgresdb
    networks:
      - learning
    expose:
      - "8080"

  backendchat:
    container_name: backendcontainer
    image: backend-chatbot:latest
    environment:
      - BOT_API_URL_GREETINGS=http://golang_container:8080/greetings
      - BOT_API_URL_REPLY=http://golang_container:8080/reply
    ports:
      - 8087:8087
    expose:
      - 8087
    networks:
      - learning

  frontendchat:
    container_name: frontendcontainer
    image: frontend-chatbot:latest
    environment:
      - REACT_APP_SOCKET=ws://backendcontainer:8087/ws
      - WDS_SOCKET_PORT=8087
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - learning

  postgresdb:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
    ports:
      - '1234:5432'
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    networks:
      - learning

# Networks to be created to facilitate communication between containers
networks:
  learning:
    driver: bridge